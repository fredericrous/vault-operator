name: Update Helm Chart

on:
  release:
    types: [published]
  repository_dispatch:
    types: [helm-chart-update]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update (without v prefix)'
        required: true
        type: string
      bump_chart_version:
        description: 'Bump chart version'
        required: false
        type: boolean
        default: true
      version_bump_type:
        description: 'Version bump type (auto, major, minor, patch)'
        required: false
        type: string
        default: 'auto'

jobs:
  update-chart:
    name: Update Helm Chart Version
    runs-on: ubuntu-latest
    steps:
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            # Remove 'v' prefix from release tag
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          elif [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            # Get version from repository_dispatch payload
            VERSION="${{ github.event.client_payload.version }}"
            VERSION="${VERSION#v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Checkout charts repository
        uses: actions/checkout@v4
        with:
          repository: fredericrous/charts
          token: ${{ secrets.CHARTS_REPO_TOKEN }}
          path: charts

      - name: Update Chart.yaml
        id: update-chart
        run: |
          cd charts
          CHART_PATH="charts/vault-transit-unseal-operator/Chart.yaml"
          
          # Get current versions BEFORE making changes
          CURRENT_CHART_VERSION=$(yq '.version' "$CHART_PATH")
          CURRENT_APP_VERSION=$(yq '.appVersion' "$CHART_PATH")
          NEW_APP_VERSION="${{ steps.version.outputs.version }}"
          
          echo "Current state:"
          echo "- Chart version: $CURRENT_CHART_VERSION"
          echo "- App version: $CURRENT_APP_VERSION â†’ $NEW_APP_VERSION"
          
          # Update appVersion
          yq -i ".appVersion = \"$NEW_APP_VERSION\"" "$CHART_PATH"
          
          # Bump chart version if requested (default: true)
          if [[ "${{ github.event.inputs.bump_chart_version }}" != "false" ]]; then
            
            # Parse versions
            IFS='.' read -r CHART_MAJOR CHART_MINOR CHART_PATCH <<< "$CURRENT_CHART_VERSION"
            IFS='.' read -r OLD_APP_MAJOR OLD_APP_MINOR OLD_APP_PATCH <<< "${CURRENT_APP_VERSION#v}"
            IFS='.' read -r NEW_APP_MAJOR NEW_APP_MINOR NEW_APP_PATCH <<< "${NEW_APP_VERSION#v}"
            
            # Determine version bump type
            BUMP_TYPE="${{ github.event.inputs.version_bump_type || 'auto' }}"
            
            if [[ "$BUMP_TYPE" == "auto" ]]; then
              # Auto-detect based on app version change
              if [[ "$NEW_APP_MAJOR" -gt "$OLD_APP_MAJOR" ]]; then
                # Major version change in app = major change in chart
                echo "Detected major version change in app ($CURRENT_APP_VERSION â†’ $NEW_APP_VERSION)"
                NEW_CHART_VERSION="$((CHART_MAJOR + 1)).0.0"
              elif [[ "$NEW_APP_MINOR" -gt "$OLD_APP_MINOR" ]]; then
                # Minor version change in app = minor change in chart  
                echo "Detected minor version change in app ($CURRENT_APP_VERSION â†’ $NEW_APP_VERSION)"
                NEW_CHART_VERSION="$CHART_MAJOR.$((CHART_MINOR + 1)).0"
              else
                # Patch version change in app = patch change in chart
                echo "Detected patch version change in app ($CURRENT_APP_VERSION â†’ $NEW_APP_VERSION)"
                NEW_CHART_VERSION="$CHART_MAJOR.$CHART_MINOR.$((CHART_PATCH + 1))"
              fi
            elif [[ "$BUMP_TYPE" == "major" ]]; then
              echo "Forcing major version bump"
              NEW_CHART_VERSION="$((CHART_MAJOR + 1)).0.0"
            elif [[ "$BUMP_TYPE" == "minor" ]]; then
              echo "Forcing minor version bump"
              NEW_CHART_VERSION="$CHART_MAJOR.$((CHART_MINOR + 1)).0"
            elif [[ "$BUMP_TYPE" == "patch" ]]; then
              echo "Forcing patch version bump"
              NEW_CHART_VERSION="$CHART_MAJOR.$CHART_MINOR.$((CHART_PATCH + 1))"
            else
              echo "Invalid version_bump_type: $BUMP_TYPE. Using patch bump."
              NEW_CHART_VERSION="$CHART_MAJOR.$CHART_MINOR.$((CHART_PATCH + 1))"
            fi
            
            echo "Updating chart version: $CURRENT_CHART_VERSION â†’ $NEW_CHART_VERSION"
            yq -i ".version = \"$NEW_CHART_VERSION\"" "$CHART_PATH"
            echo "chart_version=$NEW_CHART_VERSION" >> $GITHUB_OUTPUT
            echo "version_bump_reason=$BUMP_TYPE" >> $GITHUB_OUTPUT
          else
            CHART_VERSION=$(yq '.version' "$CHART_PATH")
            echo "chart_version=$CHART_VERSION" >> $GITHUB_OUTPUT
          fi
          
          echo "Updated Chart.yaml:"
          cat "$CHART_PATH"

      - name: Update README.md Chart Table
        run: |
          cd charts
          README_FILE="README.md"
          CHART_NAME="vault-transit-unseal-operator"
          CHART_VERSION="${{ steps.update-chart.outputs.chart_version }}"
          APP_VERSION="${{ steps.version.outputs.version }}"
          
          if [ -f "$README_FILE" ]; then
            # Update the chart table entry
            # Format: | [chart-name](path/) | chart-version | app-version | description |
            
            # Check if chart exists in the table
            if grep -q "\[${CHART_NAME}\]" "$README_FILE"; then
              echo "Updating existing chart entry in README.md"
              # Use sed to update the chart entry
              sed -i "s|\[${CHART_NAME}\].*|\[${CHART_NAME}\](charts/${CHART_NAME}/) | ${CHART_VERSION} | ${APP_VERSION} | A Kubernetes operator that automatically manages HashiCorp Vault initialization and unsealing using transit unseal |" "$README_FILE"
            else
              echo "Chart not found in README.md - adding new entry"
              # Add the chart entry after the table header
              sed -i "/^|-------|/a | [${CHART_NAME}](charts/${CHART_NAME}/) | ${CHART_VERSION} | ${APP_VERSION} | A Kubernetes operator that automatically manages HashiCorp Vault initialization and unsealing using transit unseal |" "$README_FILE"
            fi
            
            echo "Updated README.md chart table:"
            echo "- Chart version: $CHART_VERSION"
            echo "- App version: $APP_VERSION"
            
            # Show the updated line
            echo -e "\n=== Updated chart table entry ==="
            grep -n "\[${CHART_NAME}\]" "$README_FILE" || echo "Chart not found in README.md"
          else
            echo "README.md not found"
          fi

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.CHARTS_REPO_TOKEN }}
          path: charts
          commit-message: "chore: update vault-transit-unseal-operator to ${{ steps.version.outputs.version }}"
          title: "chore: update vault-transit-unseal-operator to ${{ steps.version.outputs.version }}"
          body: |
            ## Automated Chart Update
            
            This PR updates the vault-transit-unseal-operator Helm chart:
            - **appVersion**: `${{ steps.version.outputs.version }}`
            - **Chart version**: `${{ steps.update-chart.outputs.chart_version }}`
            - **Version bump type**: ${{ steps.update-chart.outputs.version_bump_reason }}
            
            ### Files Updated
            - `charts/vault-transit-unseal-operator/Chart.yaml` - Updated appVersion and chart version
            - `README.md` - Updated chart version and app version in charts table
            
            ### What's Changed
            
            This update includes the latest operator version with the following changes:
            
            ${{ github.event.release.body }}
            
            ### Checklist
            
            - [ ] Chart version bump is appropriate
            - [ ] appVersion matches the operator release
            - [ ] No breaking changes in default values
            - [ ] Chart is ready for release
            
            ### Next Steps
            
            After merging this PR, create a new release tag:
            ```bash
            git tag vault-transit-unseal-operator-v${{ steps.update-chart.outputs.chart_version }}
            git push origin vault-transit-unseal-operator-v${{ steps.update-chart.outputs.chart_version }}
            ```
            
            ---
            *This PR was automatically generated when [operator version ${{ steps.version.outputs.version }}](https://github.com/fredericrous/vault-transit-unseal-operator/releases/tag/v${{ steps.version.outputs.version }}) was released.*
          branch: update-vault-transit-unseal-operator-${{ steps.version.outputs.version }}
          base: main
          labels: |
            chart-update
            automated
            operator-release

      - name: Add PR comment with testing instructions
        if: steps.create-pr.outputs.pull-request-number
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.CHARTS_REPO_TOKEN }}
          repository: fredericrous/charts
          issue-number: ${{ steps.create-pr.outputs.pull-request-number }}
          body: |
            ### ðŸ§ª Testing Instructions
            
            Test the updated chart locally:
            ```bash
            # Clone and checkout the PR branch
            git clone https://github.com/fredericrous/charts.git
            cd charts
            git checkout update-vault-transit-unseal-operator-${{ steps.version.outputs.version }}
            
            # Test the chart
            helm template vault-transit-unseal-operator ./charts/vault-transit-unseal-operator
            helm lint ./charts/vault-transit-unseal-operator
            
            # Install test
            helm install test-release ./charts/vault-transit-unseal-operator --dry-run --debug
            ```

      # Optional: Enable auto-merge if tests pass
      # Requires branch protection rules with required status checks
      - name: Enable auto-merge
        if: steps.create-pr.outputs.pull-request-number && github.event_name == 'release'
        continue-on-error: true
        run: |
          # Wait a bit for PR to be fully created
          sleep 5
          
          # Enable auto-merge (requires repo settings to allow)
          gh pr merge ${{ steps.create-pr.outputs.pull-request-number }} \
            --repo fredericrous/charts \
            --auto \
            --squash
        env:
          GH_TOKEN: ${{ secrets.CHARTS_REPO_TOKEN }}